# -*- coding: utf-8 -*-
"""Hospital Management System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F2axuTmj8yV4dEdLw3NhwlRYnChxdzcx

# Demonstration of the program code

the program has 3 main classes (hospital, person and appointment)
and 2 subclasses (doctor and patient) that inherit from the person class

**Hospital class** has the main menu that user can choose the desired service from by numbers 1-9
and general lists (patients, doctors, appointments) that are used alongside the classes.

**Person Class** has some features inherited to the doctor and patient like name and age..

**Doctor and Patient Classes** are likely the sameÙˆ they have 3 methods (register, view, search)

**Appointment Class** is likely the same as the 2 subclasses.
you can add an appointment and view all appointments.

**Run all cells for the program to run properly**

**You can use the menu in the last cell**

# Hospital Class
"""

class Hospital:
  patients = []
  doctors = []
  appointments = []
  def __init__(self):
    pass

  @classmethod
  def menu(self):
    print("Welcome to our Hospital Management System!")
    print('''
      Enter 1 to register a new doctor
      Enter 2 to view records of registered doctors
      Enter 3 to search for a doctor by ID

      Enter 4 to register a new patient
      Enter 5 to view records of patients
      Enter 6 to search for a patient by ID

      Enter 7 to book an appointment
      Enter 8 to show active appointments
      Enter 9 to exit
          ''')
    while(True):
      number = int(input("Please Enter a service number: "))
      print()
      if number == 1:
        Doctor.register()

      elif number == 2:
        Doctor.view()

      elif number == 3:
        Doctor.search()

      elif number == 4:
        Patient.register()

      elif number == 5:
        Patient.view()

      elif number == 6:
        Patient.search()

      elif number == 7:
        Appointment.book()

      elif number == 8:
        Appointment.view()
        pass

      elif number == 9:
        # exit
        print("Thanks for using our management system! Bye :)\n")
        break

      else:
        print("Please Enter a valid number.\n")

"""# Person Class"""

class Person:
  def __init__(self, name, age, gender, ID, email):
    self.name = name
    self.age = age
    self.gender = gender
    self.ID = ID
    self.email = email

  def __str__(self):
    return f"{self.name, self.age, self.gender, self.ID, self.email}"

"""# Doctor Class"""

class Doctor(Person):

  def __init__(self, name, age, gender, ID, email, specialty):
    super().__init__(name, age, gender, ID, email)
    self.specialty = specialty

  def __str__(self):
    return f"{super().__str__()}, {self.specialty}"

  @classmethod
  def register(cls):

    #collecting Doctors Data
    name = input("Enter Doctor's name: ")
    age = input("Enter Doctor's age: ")
    gender = input("Enter Doctor's gender: ")
    ID = int(input("Enter Doctor's ID: "))
    email = input("Enter Doctor's email: ")
    specialty = input("Enter Doctor's specialty: ")

    # Adding a new doctor to the doctors list
    new_doctor = Doctor(name, age, gender, ID, email, specialty)
    Hospital.doctors.append(new_doctor)

    print("New Doctor has been registered successfully!\n")

  @classmethod
  def view(cls):
    if len(Hospital.doctors) == 0:
      print("No registered doctors found.\n")
    for doctor in Hospital.doctors:
        print(doctor)
    print()

  @classmethod
  def search(cls):
    search_doctor = int(input("Enter Doctor ID to search with: "))
    found = 0
    for doctor in Hospital.doctors:
      if search_doctor == doctor.ID:
        found += 1
        print(doctor)
    if found == 0:
      print("Doctor not found.\n")

"""# Patient Class"""

class Patient(Person):

  def __init__(self, name, age, gender, ID, email, disease, blood_type):
    super().__init__(name, age, gender, ID, email)
    self.disease = disease
    self.blood_type = blood_type

  def __str__(self):
    return f"{super().__str__()}, {self.disease}, {self.blood_type}"

  @classmethod
  def register(cls):

    #collecting patients Data
    name = input("Enter Patient's name: ")
    age = input("Enter Patient's age: ")
    gender = input("Enter Patient's gender: ")
    ID = int(input("Enter Patient's ID: "))
    email = input("Enter Patient's email: ")
    disease = input("Enter Patient's disease: ")
    blood_type = input("Enter blood type of patient: ")

    # Adding a new patient to the list
    new_patient = Patient(name, age, gender, ID, email, disease, blood_type)
    Hospital.patients.append(new_patient)

    print("New Patient has been registered successfully!\n")

  @classmethod
  def view(cls):
    if len(Hospital.patients) == 0:
      print("No registered patients found.\n")
    for patient in Hospital.patients:
        print(patient)
    print()

  @classmethod
  def search(cls):
    search_patient = int(input("Enter Patient ID to search with: "))
    found = 0
    for patient in Hospital.patients:
      if search_patient == patient.ID:
        found += 1
        print(patient)
        break
    if found == 0:
      print("Patient not found.\n")

"""# Appointment Class"""

class Appointment:
  def __init__(self, doctor, patient, date, time):
    self.doctor = doctor
    self.patient = patient
    self.date = date
    self.time = time

  @classmethod
  def book(cls):
    print("You're now booking an appointment\n")
    search_patient = int(input("Enter Patient's ID: "))
    search_doctor = int(input("Enter doctor's ID: "))
    date = input("Enter date of appointment (dd/mm/yyyy): ")
    time = input("Enter time of appointment (HH:MM): ")

    patient_found = 0
    doctor_found = 0
    for doctor in Hospital.doctors:
      if search_doctor == doctor.ID:
        doctor_found += 1
        #print(doctor.name)
        break
    if doctor_found == 0:
      print("doctor not found.\n")

    for patient in Hospital.patients:
      if search_patient == patient.ID:
        patient_found += 1
        #print(patient.name)
        break
    if patient_found == 0:
      print("Patient not found.\n")

    if patient_found and doctor_found:
      new_appointment = Appointment(doctor, patient, date, time)
      Hospital.appointments.append(new_appointment)
      print(f'''Appointment has been booked successfully
with doctor '{doctor.name}' and patient '{patient.name}'
on {date} at {time}"''')

    else:
      print("Appointment failed")

  def __str__(self):
    return f"Doctor: {self.doctor}, Patient: {self.patient}, Date: {self.date}, Time: {self.time}"

  @classmethod
  def view(cls):
    print("Active appointments:\n")
    if len(Hospital.appointments) == 0:
      print("No appointments found.\n")
    for appointment in Hospital.appointments:
        print(appointment)
    print()

"""# Run the program"""

# Sample Data for the history

# Doctors
d1 = Doctor("Ahmed", 27, "male", 856, "Ahmed.Gad@gmail.com", "teeth")
d2 = Doctor("Mayar", 31, "female", 400, "MayarMayora@yahoo.com", "eyes")
d3 = Doctor("Belal", 45, "male", 700, "BelalBolbol@gmail.com", "surgery")
Hospital.doctors.append(d1)
Hospital.doctors.append(d2)
Hospital.doctors.append(d3)

# Patients
p1 = Patient("Sarah", 30, "female", 7,"sarahsarsour@outlook", "diabetec", "A+")
p2 = Patient("Marawan", 50, "male", 10,"maromaro@hotmail.com", "teeth", "O-")
p3 = Patient("Sherine", 47, "female", 20,"shery@gmail", "cold", "B")
Hospital.patients.append(p1)
Hospital.patients.append(p2)
Hospital.patients.append(p3)

# Appointments
a1 = Appointment("Ahmed", "Sarah", "11/11/2024", "12:00 pm")
a2 = Appointment("Belal", "Marawan", "12/11/2024", "01:00 pm")
Hospital.appointments.append(a1)
Hospital.appointments.append(a2)

# To run the program:
Hospital.menu()